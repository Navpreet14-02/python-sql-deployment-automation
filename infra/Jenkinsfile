@Library("P-Funk")

import org.wgc.sonarqube.*
import org.wgc.jenkins.config.*
import org.wgc.jenkins.property.*
import org.wgc.deployment.region.*
import org.wgc.jenkins.parameter.*
import org.wgc.deployment.overrides.*
import org.daas_watchguard.validators.*
import org.wgc.deployment.environment.*
import org.wgc.deployment.accountgroup.*
import org.daas_watchguard.basefunctions.*
import org.daas_watchguard.notifications.*

def microserviceBuild = new Microservices() // org.daas_watchguard.basefunctions.Microservices
def notifications = new Teams() // org.daas_watchguard.notifications.Teams
def sqTesting = new sonarqube()


String githubUser = "jenkins-gh"
String teamName = "Team-Infrastructure"
String repoName = "endpoint-automation"
String spainrepoName = "spain-sql-store"
String githubEnterprise = "github.infra.int.daas-watchguard.com"

String githubUrl = "https://${githubEnterprise}/${teamName}/${repoName}.git"
String spaingithubUrl = "https://${githubEnterprise}/${teamName}/${spainrepoName}.git"

// Define branch variable
String branch = env.BRANCH_NAME
String environment = "dev"


StringJobParameter serverNameParam = new StringJobParameter(
    name:"Server_Name",
    description:"Name of the server",
    defaultValue:""
)
StringJobParameter databaseNameParam = new StringJobParameter(
    name:"Database_Name",
    description:"Name of the database",
    defaultValue:""
)
StringJobParameter queryFolderPathParam = new StringJobParameter(
    name:"Query_Folder_Path",
    description:"Path to the SQL query folder",
    defaultValue:""
)
StringJobParameter credentialsIdParam = new StringJobParameter(
    name:"Credentials_ID",
    description:"ID of the DB server credentials",
    defaultValue:""
)



String serverName=params.get(serverNameParam.name)
String databaseName=params.get(databaseNameParam.name)
String queryFolderPath=params.get(queryFolderPathParam.name)
String credentialsId=params.get(credentialsIdParam.name)


JobProperties jobProps = new JobProperties(this)
jobProps.addStandard([JobProperties.DISABLE_CONCURRENT_BUILDS,JobProperties.DISCARD_OLD_BUILDS])


JobParameters jobParams = new JobParameters(this)
jobParams.addCustom([serverNameParam,databaseNameParam,queryFolderPathParam,credentialsIdParam])


SonarQubeAPI sonarQubeAPI = new SonarQubeAPI(this,environment,teamName,repoName,branch)

JobConfig jobConfig = new JobConfig(this,jobParams,jobProps,environment)
jobConfig.build()

node("Win-JumpBox") {
    deleteDir()

    try {
        stage("Checkout Endpoint Automation") {
            dir('py-automation-script') {
                println("Checking out from branch: ${branch}")
                microserviceBuild.checkOut(githubUrl, branch, githubUser)
            }
        }

        stage("Checkout Spain SQL Store") {
            dir('sql-queries') {
                println("Checking out from branch: ${branch}")
                microserviceBuild.checkOut(spaingithubUrl, branch, githubUser)
            }
        }

        stage("Unit Testing"){

            try{
                withCredentials([string(credentialsId: 'sonarqube-token', variable:'AUTH_TOKEN')]){
                    sonarQubeAPI.setSonarQubeTags("projectName",AUTH_TOKEN)
                    sonarQubeAPI.setQualityGate("Highest-QualityGate",AUTH_TOKEN)
                    sonarQubeAPI.createWebHook(JENKINS_URL,AUTH_TOKEN)
                }
            }
            catch(e){
                echo "Error in invoking the sonarqube web api: ${e}"
            }

            sqTesting.sqScannerWithCoverage(teamName, repoName, branch, 'py-automation-script/src', 'tests', 'coverage.xml', 'python')
            timeout(time:1, unit:'HOURS'){
                withSonarQubeEnv('SonarQube'){
                    def qg = waitForQualityGate()
                    if(qg.status != 'OK'){
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }

        }


        stage("Execute SQL Queries") {

            dir("py-automation-script/src/sql-deployment-scripts"){

                try{
                    withCredentials([usernamePassword(credentialsId: "${credentialsId}", usernameVariable: 'DB_USERNAME', passwordVariable: 'DB_PASSWORD')]) {
                        bat """
                        echo Running SQL script...
                        python run.py --server-name ${serverName} --database-name ${databaseName} --username %DB_USERNAME% --password %DB_PASSWORD% --query-folder-path ${queryFolderPath}
                        echo Done running SQL script.
                        """
                    }
                }
                catch(Exception exc){
                    error "Error occurred while executing queries."
                }

            }


        }
    } catch (e) {
        notifications.microserviceTeamsNotification(teamName, "failed", branch)
        error(e.getMessage())
    } finally {
        deleteDir()
    }
}
